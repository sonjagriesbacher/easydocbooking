'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Seeder is an Abstract base class
// in order to use Seeder you need to
// extend Seeder into your own class and implement async run() method
var Seeder = function () {
  function Seeder() {
    _classCallCheck(this, Seeder);

    // Abstract class can not be constructed.
    // Seeder class should be extended.
    if (this.constructor === Seeder) {
      throw new TypeError('Can not construct abstract class.');
    }

    // Check if run method are implemented.
    if (this.run === Seeder.prototype.run) {
      throw new TypeError('Please implement abstract method run.');
    }
  }

  _createClass(Seeder, [{
    key: 'seed',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var results;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.beforeRun();

              case 2:
                results = null;
                _context.next = 5;
                return this.shouldRun();

              case 5:
                if (!_context.sent) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return this.run();

              case 8:
                results = _context.sent;

              case 9:
                return _context.abrupt('return', this.getStats(results));

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function seed() {
        return _ref.apply(this, arguments);
      }

      return seed;
    }()
  }, {
    key: 'shouldRun',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', true);

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function shouldRun() {
        return _ref2.apply(this, arguments);
      }

      return shouldRun;
    }()
  }, {
    key: 'beforeRun',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function beforeRun() {
        return _ref3.apply(this, arguments);
      }

      return beforeRun;
    }()
  }, {
    key: 'run',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw new TypeError('Need to implement ' + this.constructor.name + ' async run() function');

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function run() {
        return _ref4.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'getStats',
    value: function getStats(results) {
      if (Array.isArray(results)) {
        return { run: true, created: results.length };
      }

      return { run: false, created: 0 };
    }
  }], [{
    key: 'extend',
    value: function extend() {
      var userSeederMethods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var UserSeeder = function (_Seeder) {
        _inherits(UserSeeder, _Seeder);

        function UserSeeder() {
          _classCallCheck(this, UserSeeder);

          return _possibleConstructorReturn(this, (UserSeeder.__proto__ || Object.getPrototypeOf(UserSeeder)).apply(this, arguments));
        }

        return UserSeeder;
      }(Seeder);

      // Add methods to the user seeder


      Object.keys(userSeederMethods).forEach(function (key) {
        UserSeeder.prototype[key] = userSeederMethods[key];
      });

      return UserSeeder;
    }
  }]);

  return Seeder;
}();

exports.default = Seeder;