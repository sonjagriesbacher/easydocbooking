'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (argv) {
  (0, _utils.mustContainUserConfig)();

  var _config$userConfig = _config2.default.userConfig,
      mongoose = _config$userConfig.mongoose,
      mongoURL = _config$userConfig.mongoURL;

  var _getOptions = (0, _options.getOptions)(argv),
      selectedSeeders = _getOptions.selectedSeeders,
      dropDatabase = _getOptions.dropDatabase,
      helpWanted = _getOptions.helpWanted;

  if (helpWanted) {
    console.log(_usageGuide2.default);
    return Promise.resolve();
  }

  return run({
    mongoose: mongoose,
    mongoURL: mongoURL,
    selectedSeeders: selectedSeeders,
    dropDatabase: dropDatabase
  });
};

require('babel-register');

require('babel-polyfill');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _logSymbols = require('log-symbols');

var _logSymbols2 = _interopRequireDefault(_logSymbols);

var _clui = require('clui');

var _utils = require('../../lib/utils');

var _config = require('../../lib/config');

var _config2 = _interopRequireDefault(_config);

var _seed = require('../../lib/seed');

var _seed2 = _interopRequireDefault(_seed);

var _options = require('./options');

var _usageGuide = require('./usage-guide');

var _usageGuide2 = _interopRequireDefault(_usageGuide);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function run(_ref) {
  var mongoose = _ref.mongoose,
      mongoURL = _ref.mongoURL,
      selectedSeeders = _ref.selectedSeeders,
      dropDatabase = _ref.dropDatabase;

  var spinner = new _clui.Spinner('Trying to connect to MongoDB: ' + mongoURL);
  spinner.start();

  return new Promise(function (resolve, reject) {
    // MongoDB Connection
    mongoose.connect(mongoURL, function (error) {
      spinner.stop();

      if (error) {
        return reject(new Error(_logSymbols2.default.error + ' Unable to connected to MongoDB: ' + _chalk2.default.gray(mongoURL)));
      }

      console.log(_logSymbols2.default.success + ' Successfully connected to MongoDB: ' + _chalk2.default.gray(mongoURL));

      if (dropDatabase === true) {
        spinner.message('Droping database...');
        spinner.start();

        mongoose.connection.db.dropDatabase();

        spinner.stop();
        console.log(_logSymbols2.default.success + ' Database dropped!');
      }

      console.log();
      console.log('' + _chalk2.default.cyan('Seeding Results:'));

      (0, _seed2.default)(selectedSeeders).subscribe({
        next: function next(_ref2) {
          var name = _ref2.name,
              results = _ref2.results;

          spinner.stop();

          if (results) {
            var _run = results.run,
                created = results.created;


            if (_run) {
              console.log(_logSymbols2.default.success + ' ' + name + ': ' + _chalk2.default.gray(created));
            } else {
              console.log(_logSymbols2.default.error + ' ' + name);
            }
          } else {
            spinner.message(name);
            spinner.start();
          }
        },
        error: function error(_ref3) {
          var name = _ref3.name,
              _error = _ref3.error;

          spinner.stop();

          console.log(_logSymbols2.default.error + ' ' + name);
          console.log();
          console.log(_chalk2.default.red('ERROR'));
          console.log(_error.stack);

          reject(_error);
        },
        complete: function complete() {
          return resolve();
        }
      });
    });
  });
}