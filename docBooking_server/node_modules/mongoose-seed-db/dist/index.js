'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('babel-polyfill');

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _fsReaddirRecursive = require('fs-readdir-recursive');

var _fsReaddirRecursive2 = _interopRequireDefault(_fsReaddirRecursive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MongooseSeed = function () {
	function MongooseSeed() {
		_classCallCheck(this, MongooseSeed);

		_mongoose2.default.Promise = global.Promise;
	}

	_createClass(MongooseSeed, [{
		key: 'connect',
		value: function connect(db, options) {
			return new Promise(function (resolve, reject) {
				_mongoose2.default.connect(db, Object.assign({ useMongoClient: true }, options)).then(function () {
					console.log('Connected to: ' + db);
					resolve();
				}).catch(function (error) {
					reject(error);
				});
			});
		}
	}, {
		key: 'loadModels',
		value: function loadModels(path) {
			var _this = this;

			var files = (0, _fsReaddirRecursive2.default)(path);
			this.models = [];
			files.forEach(function (file) {
				if (~file.indexOf('.js')) {
					var model = require(path + '/' + file);
					_this.models.push((model.default || model).modelName);
				}
			});
			console.log('Loaded models:', this.models);
		}
	}, {
		key: 'populate',
		value: function populate(path) {
			var _this2 = this;

			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			options = Object.assign({
				populateExisting: true
			}, options);

			return new Promise(function () {
				var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(resolve) {
					var files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, collection, Model, documents, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry;

					return regeneratorRuntime.wrap(function _callee$(_context) {
						while (1) {
							switch (_context.prev = _context.next) {
								case 0:
									files = (0, _fsReaddirRecursive2.default)(path);

									console.log('Loading data from: ', files);

									_this2.data = [];
									files.forEach(function (file) {
										if (~file.indexOf('.js') || ~file.indexOf('.json')) {
											_this2.data.push(require(path + '/' + file));
										}
									});

									console.log('Populating collections: ', _this2.data.map(function (collection) {
										return collection.model;
									}));

									_iteratorNormalCompletion = true;
									_didIteratorError = false;
									_iteratorError = undefined;
									_context.prev = 8;
									_iterator = _this2.data[Symbol.iterator]();

								case 10:
									if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
										_context.next = 51;
										break;
									}

									collection = _step.value;
									Model = _mongoose2.default.model(collection.model);
									_context.next = 15;
									return Model.count({});

								case 15:
									documents = _context.sent;

									if (!(options.populateExisting || !options.populateExisting && !documents)) {
										_context.next = 47;
										break;
									}

									console.log('Populating ' + collection.model + ' with ' + collection.data.length + ' entries');
									_iteratorNormalCompletion2 = true;
									_didIteratorError2 = false;
									_iteratorError2 = undefined;
									_context.prev = 21;
									_iterator2 = collection.data[Symbol.iterator]();

								case 23:
									if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
										_context.next = 30;
										break;
									}

									entry = _step2.value;
									_context.next = 27;
									return Model.create(entry);

								case 27:
									_iteratorNormalCompletion2 = true;
									_context.next = 23;
									break;

								case 30:
									_context.next = 36;
									break;

								case 32:
									_context.prev = 32;
									_context.t0 = _context['catch'](21);
									_didIteratorError2 = true;
									_iteratorError2 = _context.t0;

								case 36:
									_context.prev = 36;
									_context.prev = 37;

									if (!_iteratorNormalCompletion2 && _iterator2.return) {
										_iterator2.return();
									}

								case 39:
									_context.prev = 39;

									if (!_didIteratorError2) {
										_context.next = 42;
										break;
									}

									throw _iteratorError2;

								case 42:
									return _context.finish(39);

								case 43:
									return _context.finish(36);

								case 44:
									;
									_context.next = 48;
									break;

								case 47:
									console.log('Model ' + collection.model + ' has ' + documents + ' existing entries, not populating');

								case 48:
									_iteratorNormalCompletion = true;
									_context.next = 10;
									break;

								case 51:
									_context.next = 57;
									break;

								case 53:
									_context.prev = 53;
									_context.t1 = _context['catch'](8);
									_didIteratorError = true;
									_iteratorError = _context.t1;

								case 57:
									_context.prev = 57;
									_context.prev = 58;

									if (!_iteratorNormalCompletion && _iterator.return) {
										_iterator.return();
									}

								case 60:
									_context.prev = 60;

									if (!_didIteratorError) {
										_context.next = 63;
										break;
									}

									throw _iteratorError;

								case 63:
									return _context.finish(60);

								case 64:
									return _context.finish(57);

								case 65:
									;
									console.log('Population Done!');
									resolve();

								case 68:
								case 'end':
									return _context.stop();
							}
						}
					}, _callee, _this2, [[8, 53, 57, 65], [21, 32, 36, 44], [37,, 39, 43], [58,, 60, 64]]);
				}));

				return function (_x2) {
					return _ref.apply(this, arguments);
				};
			}());
		}
	}, {
		key: 'clearAll',
		value: function clearAll() {
			return this.clearModels(this.models);
		}
	}, {
		key: 'clearModels',
		value: function clearModels(models) {
			var _this3 = this;

			console.log('Clearing collections: ', models);
			return new Promise(function () {
				var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(resolve) {
					var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, modelName, Model;

					return regeneratorRuntime.wrap(function _callee2$(_context2) {
						while (1) {
							switch (_context2.prev = _context2.next) {
								case 0:
									_iteratorNormalCompletion3 = true;
									_didIteratorError3 = false;
									_iteratorError3 = undefined;
									_context2.prev = 3;
									_iterator3 = models[Symbol.iterator]();

								case 5:
									if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
										_context2.next = 14;
										break;
									}

									modelName = _step3.value;
									Model = _mongoose2.default.model(modelName);
									_context2.next = 10;
									return Model.remove({});

								case 10:
									resolve();

								case 11:
									_iteratorNormalCompletion3 = true;
									_context2.next = 5;
									break;

								case 14:
									_context2.next = 20;
									break;

								case 16:
									_context2.prev = 16;
									_context2.t0 = _context2['catch'](3);
									_didIteratorError3 = true;
									_iteratorError3 = _context2.t0;

								case 20:
									_context2.prev = 20;
									_context2.prev = 21;

									if (!_iteratorNormalCompletion3 && _iterator3.return) {
										_iterator3.return();
									}

								case 23:
									_context2.prev = 23;

									if (!_didIteratorError3) {
										_context2.next = 26;
										break;
									}

									throw _iteratorError3;

								case 26:
									return _context2.finish(23);

								case 27:
									return _context2.finish(20);

								case 28:
								case 'end':
									return _context2.stop();
							}
						}
					}, _callee2, _this3, [[3, 16, 20, 28], [21,, 23, 27]]);
				}));

				return function (_x3) {
					return _ref2.apply(this, arguments);
				};
			}());
		}
	}]);

	return MongooseSeed;
}();

module.exports = exports = new MongooseSeed();