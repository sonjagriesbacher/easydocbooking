'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (argv) {
  var _getOptions = (0, _options.getOptions)(argv),
      es6 = _getOptions.es6,
      seedersFolder = _getOptions.seedersFolder,
      helpWanted = _getOptions.helpWanted;

  if (helpWanted) {
    console.log(_usageGuide2.default);
  } else {
    return Promise.resolve()
    // Ask the user wheter to use es2015 syntax if not decided yet
    .then(function () {
      if (typeof es6 !== 'boolean') {
        return _inquirer2.default.prompt([{
          name: 'useES6',
          type: 'confirm',
          message: 'Would you like to use ES6/ES2015 syntax? (require babel)',
          default: true
        }]).then(function (_ref) {
          var useES6 = _ref.useES6;

          es6 = useES6 === true;
        });
      }
    })
    // Ask the user wheter for the seeders folder name if not decided yet
    .then(function () {
      if (typeof seedersFolder !== 'string' || _lodash2.default.trim(seedersFolder).length < 3) {
        return _inquirer2.default.prompt([{
          name: 'seedersFolderName',
          type: 'input',
          message: 'Choose your seeders folder name',
          default: 'seeders',
          filter: function filter(input) {
            return _lodash2.default.trim(input);
          },
          validate: function validate(input) {
            return input.length >= 3;
          }
        }]).then(function (_ref2) {
          var seedersFolderName = _ref2.seedersFolderName;

          seedersFolder = seedersFolderName;
        });
      }
    }).then(function () {
      return init({ es6: es6, seedersFolder: seedersFolder });
    });
  }
};

var _fs2 = require('fs');

var _fs3 = _interopRequireDefault(_fs2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _memFs = require('mem-fs');

var _memFs2 = _interopRequireDefault(_memFs);

var _memFsEditor = require('mem-fs-editor');

var _memFsEditor2 = _interopRequireDefault(_memFsEditor);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _config = require('../../lib/config');

var _config2 = _interopRequireDefault(_config);

var _options = require('./options');

var _usageGuide = require('./usage-guide');

var _usageGuide2 = _interopRequireDefault(_usageGuide);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function init(_ref3) {
  var _ref3$es = _ref3.es6,
      es6 = _ref3$es === undefined ? false : _ref3$es,
      _ref3$seedersFolder = _ref3.seedersFolder,
      seedersFolder = _ref3$seedersFolder === undefined ? 'seeders' : _ref3$seedersFolder;

  var store = _memFs2.default.create();
  var fs = _memFsEditor2.default.create(store);

  _writeUserGeneratorConfig();
  _writeUserConfig();
  _createSeedersFolder();

  function _writeUserGeneratorConfig() {
    var projectRoot = _config2.default.projectRoot,
        userGeneratorConfigExists = _config2.default.userGeneratorConfigExists,
        userGeneratorConfigFilename = _config2.default.userGeneratorConfigFilename,
        userGeneratorConfigFilepath = _config2.default.userGeneratorConfigFilepath;


    var generatorConfig = { es6: es6, seedersFolder: seedersFolder };

    if (userGeneratorConfigExists === true) {
      return console.log(_chalk2.default.yellow('CONFLICT') + ' ' + userGeneratorConfigFilename + ' are already exists');
    }

    fs.writeJSON(userGeneratorConfigFilepath, generatorConfig);

    _config2.default.useEs6Generator = generatorConfig.es6;
    _config2.default.userSeedersFolderName = generatorConfig.seedersFolder;
    _config2.default.userSeedersFolderPath = _path2.default.join(projectRoot, generatorConfig.seedersFolder);

    fs.commit(function () {
      console.log(_chalk2.default.green('CREATED') + ' ' + userGeneratorConfigFilename);
    });
  }

  function _createSeedersFolder() {
    var userSeedersFolderName = _config2.default.userSeedersFolderName,
        userSeedersFolderPath = _config2.default.userSeedersFolderPath;


    if (_fs3.default.existsSync(userSeedersFolderPath)) {
      return console.log(_chalk2.default.yellow('CONFLICT') + ' ' + userSeedersFolderName + '/ are already exists');
    }

    try {
      _fs3.default.mkdirSync(userSeedersFolderPath);
      console.log(_chalk2.default.green('CREATED') + ' ' + userSeedersFolderName + '/');
    } catch (err) {
      console.log(_chalk2.default.red('ERROR') + ' ' + userSeedersFolderName + '/ unable to create folder');
      return console.log(err.stack);
    }
  }

  function _writeUserConfig() {
    var userConfigExists = _config2.default.userConfigExists,
        userConfigFilename = _config2.default.userConfigFilename,
        userConfigFilepath = _config2.default.userConfigFilepath,
        useEs6Generator = _config2.default.useEs6Generator;

    var templatePath = useEs6Generator ? _path2.default.join(__dirname, '../../../templates/md-seed-config.es6.js') : _path2.default.join(__dirname, '../../../templates/md-seed-config.js');

    if (userConfigExists === true) {
      return console.log(_chalk2.default.yellow('CONFLICT') + ' ' + userConfigFilename + ' are already exists');
    }

    fs.copy(templatePath, userConfigFilepath);
    fs.commit(function () {
      console.log(_chalk2.default.green('CREATED') + ' ' + userConfigFilename);
    });
  }
}