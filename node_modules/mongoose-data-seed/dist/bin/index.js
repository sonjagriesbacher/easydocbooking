#!/usr/bin/env node
'use strict';

require('babel-register');

require('babel-polyfill');

var _commandLineCommands2 = require('command-line-commands');

var _commandLineCommands3 = _interopRequireDefault(_commandLineCommands2);

var _usageGuide = require('./usage-guide');

var _usageGuide2 = _interopRequireDefault(_usageGuide);

var _run = require('./run');

var _run2 = _interopRequireDefault(_run);

var _init = require('./init');

var _init2 = _interopRequireDefault(_init);

var _generate = require('./generate');

var _generate2 = _interopRequireDefault(_generate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INIT_COMMAND = 'init';

// Import commands

var RUN_COMMAND = 'run';
var GENERATE_COMMAND = 'generate';
var GENERATE_ALIAS_COMMAND = 'g';

var validCommands = [null, INIT_COMMAND, RUN_COMMAND, GENERATE_COMMAND, GENERATE_ALIAS_COMMAND];

var _commandLineCommands = (0, _commandLineCommands3.default)(validCommands),
    command = _commandLineCommands.command,
    argv = _commandLineCommands.argv;

try {
  // Run the selected command
  switch (command) {
    case INIT_COMMAND:
      {
        (0, _init2.default)(argv);
        break;
      }

    case RUN_COMMAND:
      {
        (0, _run2.default)(argv).then(function () {
          return process.exit();
        }, function (err) {
          if (err && err.message) {
            console.log(err.message);
          }

          process.exit(1);
        });
        break;
      }

    case GENERATE_COMMAND:
    case GENERATE_ALIAS_COMMAND:
      {
        (0, _generate2.default)(argv);
        break;
      }

    // Show usage guide
    default:
      {
        console.log(_usageGuide2.default);
        break;
      }
  }
} catch (err) {
  if (err.message !== 'exit') {
    console.log(err.message);
  }

  process.exit(1);
}