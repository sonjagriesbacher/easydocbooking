'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Observable = require('rxjs/Observable');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var runSeeders = function runSeeders() {
  var seeders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _Observable.Observable.create(function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(observer) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, name, seeder, results;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = Object.keys(seeders)[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              name = _step.value;

              observer.next({ name: name });

              _context.prev = 8;
              seeder = new seeders[name]();
              _context.next = 12;
              return seeder.seed();

            case 12:
              results = _context.sent;
              // eslint-disable-line no-await-in-loop

              observer.next({ name: name, results: results });
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context['catch'](8);

              observer.error({ name: name, error: _context.t0 });

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](3);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:

              observer.complete();

            case 37:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[3, 24, 28, 36], [8, 16], [29,, 31, 35]]);
    }));

    return function (_x2) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = runSeeders;